variables:
  CONTAINER_TEST_IMAGE: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}"
  CONTAINER_RELEASE_IMAGE: "${CI_REGISTRY_IMAGE}:0.1.0"
  BUILDER_IMAGE: "${CONTAINER_RELEASE_IMAGE}"
  PUBLISHER_IMAGE: "${CI_REGISTRY_PUBLISHER}/publisher:2.0.0"
  PROJECTS: review gpu-operator container-toolkit driver-containers edge gpu-telemetry

stages:
- build_image
- build_docs
- publish_docs

.build_image:
  image: docker:19.03.12
  stage: build_image
  services:
    - docker:19.03.12-dind
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"
    - docker build -t "${CONTAINER_TEST_IMAGE}" . -f docker/Dockerfile
    - docker push "${CONTAINER_TEST_IMAGE}"
    - echo "BUILDER_IMAGE=${CONTAINER_TEST_IMAGE}" >> build.env
    - >
      if [ "${CI_COMMIT_BRANCH}" == "${CI_DEFAULT_BRANCH}" ] && [ "${CI_PIPELINE_SOURCE}" == "push" ]; then
        docker tag "${CONTAINER_TEST_IMAGE}" "${CONTAINER_RELEASE_IMAGE}"
        docker push "${CONTAINER_RELEASE_IMAGE}"
      fi
  artifacts:
    reports:
      dotenv: build.env

.build_image_rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - docker/Dockerfile
        - "deps/*"
        - repo.toml

build_image_ext:
  extends: .build_image
  rules:
    - if: $INTERNAL != null
      when: never
    - !reference [.build_image_rules, rules]

build_image_int:
  extends: .build_image
  tags:
    - os/linux
    - type/docker
  rules:
    - if: $INTERNAL == null
      when: never
    - !reference [.build_image_rules, rules]

.build:
  stage: build_docs
  image: "${BUILDER_IMAGE}"
  script:
    - |+
      for x in ${PROJECTS}
      do
        ./repo docs -p "${x}" || true
      done
    - echo "BUILDER_IMAGE=${BUILDER_IMAGE}" >> build.env
  artifacts:
    name: ${CI_PROJECT_NAME}-${CI_COMMIT_SHORT_SHA}
    paths:
      - _build
    expire_in: 1h
    reports:
      dotenv: build.env

.build_rules:
  rules:
    - if: ($CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH) || $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH =~ /-v[0-9]/

build_ext:
  extends: .build
  rules:
    - if: $INTERNAL != null
      when: never
    - !reference [.build_rules, rules]

build_int:
  extends: .build
  tags:
    - os/linux
    - type/docker
  rules:
    - if: $INTERNAL == null
      when: never
    - !reference [.build_rules, rules]

pages:
  image: "${CONTAINER_RELEASE_IMAGE}"
  stage: publish_docs
  script:
    - rm -rf public
    - cp -r _build/docs/ public
  artifacts:
    paths:
      - public
    expire_in: 1 week
  dependencies:
    - build_ext
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push" && $INTERNAL != 'true'


publish_docs:
  image:
    name: "${PUBLISHER_IMAGE}"
    entrypoint: [ "" ]
  stage: publish_docs
  tags:
    - os/linux
    - type/docker
  variables:
    HTML_PATH: "_build/docs"
  script:
  - echo "Pushing docs live to https://docs.nvidia.com/datacenter/cloud-native"
  - export VERSION="${CI_COMMIT_BRANCH//*v}"
  - export DOCSET="${CI_COMMIT_BRANCH%-v*}"
  - |+
    if [[ "${CI_COMMIT_MESSAGE}" =~ $'\n/latest\n' ]]; then
      export FORCE_LATEST=true
    fi
  - echo "Publishing dos for ${DOCSET} and version ${VERSION}"
  - pushd "${HTML_PATH}/${DOCSET}/latest"
  - deploy_s3.sh --archive "${DOCSET}" "${VERSION}"
  - |+
    if [ "true" == "${FORCE_LATEST}" ]; then
      deploy_s3.sh --latest "${DOCSET}"
    fi
  dependencies:
    - build_int
  rules:
    - if: $CI_COMMIT_BRANCH =~ /[a-z-]+v[0-9]+.+/ && ($CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web" ) && $INTERNAL == 'true'
