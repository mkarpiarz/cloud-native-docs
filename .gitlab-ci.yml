image: docker:19.03.12

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  BUILDER_IMAGE: "${CI_REGISTRY_IMAGE}/cnt-sphinxdoc-${CI_PIPELINE_ID}"
  PUBLISHER_IMAGE: "${CI_REGISTRY_PUBLISHER}/publisher:1.0.0"

# Enable pipelines on merge requests, tags, and branches.
# Avoid duplicate pipelines when pushing to a branch associated with an open MR.
# https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH
    - if: $CI_COMMIT_TAG

stages:
- build_image
- build_docs
- stage_docs
- publish_docs

services:
  - docker:19.03.12-dind

before_script:
  - echo "${BUILDER_IMAGE}"
  - docker info
  - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" "${CI_REGISTRY}"

build_image:
  stage: build_image
  script:
    - docker build --pull --no-cache --tag "${BUILDER_IMAGE}" --file docker/Dockerfile .
    - docker push "${BUILDER_IMAGE}"

.build_docs:
  stage: build_docs
  variables:
    PROJECT_PATH: "${CI_BUILDS_DIR}/${CI_CONCURRENT_ID}/${CI_PROJECT_NAME}"
    DOC_MOUNT_PATH: "/docs"
    DOC_BUILD_PATH: "${DOC_MOUNT_PATH}/_build/html/"
    DOC_STAGE_PATH: "/opt/build/html/${CI_PIPELINE_ID}"
    CONTAINER_NAME: "${CI_PROJECT_NAME}.${CI_JOB_ID}.${CI_JOB_NAME}"
  script:
  - echo "${PROJECT_PATH}"
  - echo "${DOC_BUILD_PATH}"
  - echo "${DOC_STAGE_PATH}"
  - echo "${CONTAINER_NAME}"
  - docker run --name "${CONTAINER_NAME}" -v "${CI_PROJECT_DIR}":"${DOC_MOUNT_PATH}" "${BUILDER_IMAGE}"

build_docs:
  extends:
    - .build_docs
  after_script:
  - docker cp "${CONTAINER_NAME}:${DOC_BUILD_PATH}" "${DOC_STAGE_PATH}"
  - docker rm -f ${CONTAINER_NAME}
  - docker rmi "${BUILDER_IMAGE}"
  only:
    variables:
      - $INTERNAL

pages:
  extends:
    .build_docs
  after_script:
  - mkdir public
  - mv _build/html/* public
  - docker rm -f ${CONTAINER_NAME}
  - docker rmi "${BUILDER_IMAGE}"
  - echo "Looks like everything was built OK. See the staged docs at ${CI_PAGES_URL}"
  artifacts:
    paths:
      - public
    expire_in: 1 week
  except:
    variables:
      - $INTERNAL

stage_docs:
  stage: stage_docs
  script:
  - export STAGING_URL="http://${CI_RUNNER_DESCRIPTION}/html/${CI_PIPELINE_ID}"
  - echo "Looks like everything was built OK. See the staged docs at ${STAGING_URL}"
  only:
    variables:
      - $INTERNAL

publish_docs:
  image:
    name: "${PUBLISHER_IMAGE}"
    entrypoint: [ "" ]
  services: []
  before_script: []
  stage: publish_docs
  script:
  - echo "Pushing docs live to https://docs.nvidia.com/datacenter/cloud-native"
  - /opt/build/html/deploy_s3.sh --copy-flush ${CI_PIPELINE_ID}
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && ( $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "web" ) && $INTERNAL != null
